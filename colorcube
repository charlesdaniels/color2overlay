#!/usr/bin/env python3

########10########20########30##### LICENSE ####50########60########70########80
# Copyright (c) 2017, Charles Daniels
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
########10########20########30########40########50########60########70########80

from PIL import Image
from PIL import ImageDraw
import colormap
import sys
import argparse
import logging


########10########20########30#### ARGUMENTS ###50########60########70########80

def posInt(x):
    # make sure that an integer argument is positive

    x = int(x)
    if x < 0:
        raise argparse.ArgumentTypeError("'{}' is not positive".format(x))
    return x

def byteInt(x):
    # make sure that an integer is within 0-255
    x = int(x)
    if x < 0 or x > 255:
        raise argparse.ArgumentTypeError("'{}' is not a valid byte".format(x))
    return x

argsDesc = "A tool for generating pretty images from sets of colors"

parser = argparse.ArgumentParser(description = argsDesc)
parser.add_argument("--verbose", "-v", action = "store_true", default = False,
    help = "Display verbose output on stderr")
parser.add_argument("--debug", "-d", action = "store_true", default = False,
    help = "Display debug output on stderr")
parser.add_argument("--canvas-size-x", "-x", default = 1920, type = posInt,
    help = "Canvas size on the X axis in pixels (default: 1920)")
parser.add_argument("--canvas-size-y", "-y", default = 1080, type = posInt,
    help = "Canvas size on the Y axis in pixels (default: 1080")
parser.add_argument("--margin", "-m", default = 200, type = posInt,
    help = "Space between rectangles and canvas edge in pixels (default: 200)")
parser.add_argument("--input-colors", "-c", default = "stdin",
    help = "Input file for colors, 'stdin' for standard in (default: stdin)")
parser.add_argument("--alpha", "-a", default = 255, type = byteInt,
    help = "Set the alpha channel for input colors (default: 255)")
parser.add_argument("--width", "-w", default = 0.8, type = float,
        help = "Percentage of maximum rectangle width to use (default: 0.8)")

args = parser.parse_args()

# set log level
logLevel = logging.WARNING
if args.verbose:
    logLevel = logging.INFO
if args.debug:
    logLevel = logging.DEBUG

########10########20########30##### LOGGING ####50########60########70########80


logRoot = logging.getLogger()
logRoot.setLevel(logLevel)

# Make sure all logs go to stderr
logHandler = logging.StreamHandler(sys.stderr)
logHandler.setLevel(logLevel)

# set log format
logFormatter = \
    logging.Formatter("[%(asctime)s][%(levelname)s]: %(message)s")

# apply globally
logHandler.setFormatter(logFormatter)
logRoot.addHandler(logHandler)

logging.debug("{} started.".format(sys.argv[0]))

########10########20########30###### SETUP #####50########60########70########80

canvasSize = (args.canvas_size_x, args.canvas_size_y)
margin     = args.margin
alpha      = args.alpha
width      = args.width

logging.debug("canvas size: {}".format(canvasSize))
logging.debug("margin: {}".format(margin))
logging.debug("alpha: {}".format(alpha))
logging.debug("width: {}".format(width))

# area in which we can draw the rectangles
drawable = ((margin, margin),
            (canvasSize[0] - margin, canvasSize[1] - margin))
logging.debug("drawable area: {}".format(drawable))

# setup the image object
canvas = Image.new("RGBA", canvasSize, (0, 0, 0, 0))
draw = ImageDraw.Draw(canvas, "RGBA")

# setup colors file handle
colorsFile = None
if args.input_colors == "stdin":
    logging.debug("Reading colors from standard in.")
    colorsFile = sys.stdin
else:
    logging.debug("Reading colors from file: '{}'".format(args.input_colors))
    colorsFile = open(args.input_colors, "r")

########10########20########30# EXTRACT COLORS #50########60########70########80

colors = []

# parse colors from the input file
for line in colorsFile:
    line = line.rstrip()

    # drop lines which are invalid
    try:
        color = colormap.hex2rgb(line)
    except Exception as e:
        logging.info("failed to convert line '{}'".format(line))
        continue

    # add in alpha channel
    color = (*color, alpha)

    logging.debug("{} -> {}".format(line, color))
    colors.append(color)

########10########20########30# DRAW RECTANGLES 50########60########70########80

# calculate maximum width between rectangle centers
pitch = int(abs(drawable[0][0] - drawable[1][0]) / len(colors))
logging.debug("pitch: {}".format(pitch))

# rectangle width
rectWidth = int(pitch * width)
logging.debug("rectangle width: {}".format(rectWidth))

# upper and lower bounds on the Y axis
yUpper = drawable[0][1]
yLower = drawable[1][1]
logging.debug("y axis boundaries: {}, {}".format(yUpper, yLower))


# render each rectangle
for i in range(len(colors)):
    currentColor = colors[i]

    # rectangle center on the x axis
    xCenter = drawable[0][0] + int(pitch / 2) + i * pitch

    # rectangle left and right edges on the x axis
    logging.debug("Rectangle centered at: {}".format(xCenter))
    xLeft  = xCenter - int(rectWidth / 2)
    xRight = xCenter + int(rectWidth / 2)


    # rectangle coordinates
    region = ((xLeft, yUpper), (xRight, yLower))
    logging.debug("Rectangle {} region: {}".format(i, region))

    draw.rectangle(region, fill=currentColor)

# save output
canvas.save("out.png", "PNG")
